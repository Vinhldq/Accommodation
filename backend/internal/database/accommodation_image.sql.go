// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: accommodation_image.sql

package database

import (
	"context"
)

const deleteAccommodationImage = `-- name: DeleteAccommodationImage :exec
DELETE FROM ` + "`" + `ecommerce_go_accommodation_image` + "`" + `
WHERE
    ` + "`" + `image` + "`" + ` = ?
`

func (q *Queries) DeleteAccommodationImage(ctx context.Context, image string) error {
	_, err := q.db.ExecContext(ctx, deleteAccommodationImage, image)
	return err
}

const getAccommodationImage = `-- name: GetAccommodationImage :one
SELECT
    ` + "`" + `image` + "`" + `
FROM
    ` + "`" + `ecommerce_go_accommodation_image` + "`" + `
WHERE
    ` + "`" + `accommodation_id` + "`" + ` = ?
LIMIT
    1
`

func (q *Queries) GetAccommodationImage(ctx context.Context, accommodationID string) (string, error) {
	row := q.db.QueryRowContext(ctx, getAccommodationImage, accommodationID)
	var image string
	err := row.Scan(&image)
	return image, err
}

const getAccommodationImages = `-- name: GetAccommodationImages :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `image` + "`" + `
FROM
    ` + "`" + `ecommerce_go_accommodation_image` + "`" + `
WHERE
    ` + "`" + `accommodation_id` + "`" + ` = ?
`

type GetAccommodationImagesRow struct {
	ID    string
	Image string
}

func (q *Queries) GetAccommodationImages(ctx context.Context, accommodationID string) ([]GetAccommodationImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccommodationImages, accommodationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccommodationImagesRow
	for rows.Next() {
		var i GetAccommodationImagesRow
		if err := rows.Scan(&i.ID, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAccommodationImages = `-- name: UpdateAccommodationImages :exec
INSERT INTO
    ` + "`" + `ecommerce_go_accommodation_image` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `accommodation_id` + "`" + `,
        ` + "`" + `image` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?)
`

type UpdateAccommodationImagesParams struct {
	ID              string
	AccommodationID string
	Image           string
	CreatedAt       uint64
	UpdatedAt       uint64
}

func (q *Queries) UpdateAccommodationImages(ctx context.Context, arg UpdateAccommodationImagesParams) error {
	_, err := q.db.ExecContext(ctx, updateAccommodationImages,
		arg.ID,
		arg.AccommodationID,
		arg.Image,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}
