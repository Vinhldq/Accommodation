// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_room_booking.sql

package database

import (
	"context"
)

const cancelOrderRoomBooking = `-- name: CancelOrderRoomBooking :exec
UPDATE ` + "`" + `ecommerce_go_order_room_booking` + "`" + ` 
SET ` + "`" + `booking_status` + "`" + ` = 'canceled', ` + "`" + `updated_at` + "`" + ` = ?
WHERE ` + "`" + `order_detail_id` + "`" + ` = ?
`

type CancelOrderRoomBookingParams struct {
	UpdatedAt     uint64
	OrderDetailID string
}

func (q *Queries) CancelOrderRoomBooking(ctx context.Context, arg CancelOrderRoomBookingParams) error {
	_, err := q.db.ExecContext(ctx, cancelOrderRoomBooking, arg.UpdatedAt, arg.OrderDetailID)
	return err
}

const createOrderRoomBooking = `-- name: CreateOrderRoomBooking :exec
INSERT INTO ` + "`" + `ecommerce_go_order_room_booking` + "`" + ` (
    ` + "`" + `id` + "`" + `,
    ` + "`" + `order_detail_id` + "`" + `,
    ` + "`" + `accommodation_room_id` + "`" + `,
    ` + "`" + `booking_status` + "`" + `,
    ` + "`" + `created_at` + "`" + `,
    ` + "`" + `updated_at` + "`" + `
) VALUES (?, ?, ?, ?, ?, ?)
`

type CreateOrderRoomBookingParams struct {
	ID                  string
	OrderDetailID       string
	AccommodationRoomID string
	BookingStatus       EcommerceGoOrderRoomBookingBookingStatus
	CreatedAt           uint64
	UpdatedAt           uint64
}

func (q *Queries) CreateOrderRoomBooking(ctx context.Context, arg CreateOrderRoomBookingParams) error {
	_, err := q.db.ExecContext(ctx, createOrderRoomBooking,
		arg.ID,
		arg.OrderDetailID,
		arg.AccommodationRoomID,
		arg.BookingStatus,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getOrderRoomBookingByID = `-- name: GetOrderRoomBookingByID :one
SELECT id, order_detail_id, accommodation_room_id, booking_status, created_at, updated_at, is_deleted FROM ` + "`" + `ecommerce_go_order_room_booking` + "`" + ` 
WHERE ` + "`" + `id` + "`" + ` = ? AND ` + "`" + `is_deleted` + "`" + ` = 0
`

func (q *Queries) GetOrderRoomBookingByID(ctx context.Context, id string) (EcommerceGoOrderRoomBooking, error) {
	row := q.db.QueryRowContext(ctx, getOrderRoomBookingByID, id)
	var i EcommerceGoOrderRoomBooking
	err := row.Scan(
		&i.ID,
		&i.OrderDetailID,
		&i.AccommodationRoomID,
		&i.BookingStatus,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getOrderRoomBookingsByOrderDetailID = `-- name: GetOrderRoomBookingsByOrderDetailID :many
SELECT id, order_detail_id, accommodation_room_id, booking_status, created_at, updated_at, is_deleted FROM ` + "`" + `ecommerce_go_order_room_booking` + "`" + ` 
WHERE ` + "`" + `order_detail_id` + "`" + ` = ? AND ` + "`" + `is_deleted` + "`" + ` = 0
`

func (q *Queries) GetOrderRoomBookingsByOrderDetailID(ctx context.Context, orderDetailID string) ([]EcommerceGoOrderRoomBooking, error) {
	rows, err := q.db.QueryContext(ctx, getOrderRoomBookingsByOrderDetailID, orderDetailID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EcommerceGoOrderRoomBooking
	for rows.Next() {
		var i EcommerceGoOrderRoomBooking
		if err := rows.Scan(
			&i.ID,
			&i.OrderDetailID,
			&i.AccommodationRoomID,
			&i.BookingStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderRoomBookingsByOrderDetailIDWithRoomInfo = `-- name: GetOrderRoomBookingsByOrderDetailIDWithRoomInfo :many
SELECT 
    orb.id,
    orb.order_detail_id,
    orb.accommodation_room_id,
    orb.booking_status,
    orb.created_at,
    orb.updated_at,
    ar.name as room_name
FROM ` + "`" + `ecommerce_go_order_room_booking` + "`" + ` orb
JOIN ` + "`" + `ecommerce_go_accommodation_room` + "`" + ` ar ON orb.accommodation_room_id = ar.id
WHERE orb.order_detail_id = ?
ORDER BY ar.name ASC
`

type GetOrderRoomBookingsByOrderDetailIDWithRoomInfoRow struct {
	ID                  string
	OrderDetailID       string
	AccommodationRoomID string
	BookingStatus       EcommerceGoOrderRoomBookingBookingStatus
	CreatedAt           uint64
	UpdatedAt           uint64
	RoomName            string
}

func (q *Queries) GetOrderRoomBookingsByOrderDetailIDWithRoomInfo(ctx context.Context, orderDetailID string) ([]GetOrderRoomBookingsByOrderDetailIDWithRoomInfoRow, error) {
	rows, err := q.db.QueryContext(ctx, getOrderRoomBookingsByOrderDetailIDWithRoomInfo, orderDetailID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrderRoomBookingsByOrderDetailIDWithRoomInfoRow
	for rows.Next() {
		var i GetOrderRoomBookingsByOrderDetailIDWithRoomInfoRow
		if err := rows.Scan(
			&i.ID,
			&i.OrderDetailID,
			&i.AccommodationRoomID,
			&i.BookingStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderRoomBookingsByOrderID = `-- name: GetOrderRoomBookingsByOrderID :many
SELECT orb.id, orb.order_detail_id, orb.accommodation_room_id, orb.booking_status, orb.created_at, orb.updated_at, orb.is_deleted FROM ` + "`" + `ecommerce_go_order_room_booking` + "`" + ` orb
JOIN ` + "`" + `ecommerce_go_order_detail` + "`" + ` od ON orb.order_detail_id = od.id
WHERE od.order_id = ? AND orb.is_deleted = 0
`

func (q *Queries) GetOrderRoomBookingsByOrderID(ctx context.Context, orderID string) ([]EcommerceGoOrderRoomBooking, error) {
	rows, err := q.db.QueryContext(ctx, getOrderRoomBookingsByOrderID, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EcommerceGoOrderRoomBooking
	for rows.Next() {
		var i EcommerceGoOrderRoomBooking
		if err := rows.Scan(
			&i.ID,
			&i.OrderDetailID,
			&i.AccommodationRoomID,
			&i.BookingStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRoomBookingsByAccommodationRoomID = `-- name: GetRoomBookingsByAccommodationRoomID :many
SELECT id, order_detail_id, accommodation_room_id, booking_status, created_at, updated_at, is_deleted FROM ` + "`" + `ecommerce_go_order_room_booking` + "`" + ` 
WHERE ` + "`" + `accommodation_room_id` + "`" + ` = ? AND ` + "`" + `booking_status` + "`" + ` IN ('reserved', 'checked_in')
ORDER BY ` + "`" + `created_at` + "`" + ` DESC
`

func (q *Queries) GetRoomBookingsByAccommodationRoomID(ctx context.Context, accommodationRoomID string) ([]EcommerceGoOrderRoomBooking, error) {
	rows, err := q.db.QueryContext(ctx, getRoomBookingsByAccommodationRoomID, accommodationRoomID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EcommerceGoOrderRoomBooking
	for rows.Next() {
		var i EcommerceGoOrderRoomBooking
		if err := rows.Scan(
			&i.ID,
			&i.OrderDetailID,
			&i.AccommodationRoomID,
			&i.BookingStatus,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderRoomBookingStatus = `-- name: UpdateOrderRoomBookingStatus :exec
UPDATE ` + "`" + `ecommerce_go_order_room_booking` + "`" + ` 
SET ` + "`" + `booking_status` + "`" + ` = ?, ` + "`" + `updated_at` + "`" + ` = ?
WHERE ` + "`" + `id` + "`" + ` = ?
`

type UpdateOrderRoomBookingStatusParams struct {
	BookingStatus EcommerceGoOrderRoomBookingBookingStatus
	UpdatedAt     uint64
	ID            string
}

func (q *Queries) UpdateOrderRoomBookingStatus(ctx context.Context, arg UpdateOrderRoomBookingStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateOrderRoomBookingStatus, arg.BookingStatus, arg.UpdatedAt, arg.ID)
	return err
}
