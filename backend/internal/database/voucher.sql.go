// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: voucher.sql

package database

import (
	"context"
)

const createVoucher = `-- name: CreateVoucher :exec
INSERT INTO
    ` + "`" + `ecommerce_go_voucher` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `user_operator_id` + "`" + `,
        ` + "`" + `code` + "`" + `,
        ` + "`" + `discount_type` + "`" + `,
        ` + "`" + `discount_value` + "`" + `,
        ` + "`" + `is_active` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateVoucherParams struct {
	ID             string
	UserOperatorID string
	Code           string
	DiscountType   EcommerceGoVoucherDiscountType
	DiscountValue  string
	IsActive       uint8
	CreatedAt      uint64
	UpdatedAt      uint64
}

func (q *Queries) CreateVoucher(ctx context.Context, arg CreateVoucherParams) error {
	_, err := q.db.ExecContext(ctx, createVoucher,
		arg.ID,
		arg.UserOperatorID,
		arg.Code,
		arg.DiscountType,
		arg.DiscountValue,
		arg.IsActive,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteVoucher = `-- name: DeleteVoucher :exec
UPDATE ` + "`" + `ecommerce_go_voucher` + "`" + `
SET
    ` + "`" + `is_deleted` + "`" + ` = 1
WHERE
    ` + "`" + `id` + "`" + ` = ?
    and ` + "`" + `user_operator_id` + "`" + ` = ?
`

type DeleteVoucherParams struct {
	ID             string
	UserOperatorID string
}

func (q *Queries) DeleteVoucher(ctx context.Context, arg DeleteVoucherParams) error {
	_, err := q.db.ExecContext(ctx, deleteVoucher, arg.ID, arg.UserOperatorID)
	return err
}

const getVouchers = `-- name: GetVouchers :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `code` + "`" + `,
    ` + "`" + `discount_type` + "`" + `,
    ` + "`" + `discount_value` + "`" + `,
    ` + "`" + `is_active` + "`" + `
FROM
    ` + "`" + `ecommerce_go_voucher` + "`" + `
WHERE
    ` + "`" + `user_operator_id` + "`" + ` = ?
`

type GetVouchersRow struct {
	ID            string
	Code          string
	DiscountType  EcommerceGoVoucherDiscountType
	DiscountValue string
	IsActive      uint8
}

func (q *Queries) GetVouchers(ctx context.Context, userOperatorID string) ([]GetVouchersRow, error) {
	rows, err := q.db.QueryContext(ctx, getVouchers, userOperatorID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetVouchersRow
	for rows.Next() {
		var i GetVouchersRow
		if err := rows.Scan(
			&i.ID,
			&i.Code,
			&i.DiscountType,
			&i.DiscountValue,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateVoucher = `-- name: UpdateVoucher :exec
UPDATE ` + "`" + `ecommerce_go_voucher` + "`" + `
SET
    ` + "`" + `code` + "`" + ` = ?,
    ` + "`" + `discount_type` + "`" + ` = ?,
    ` + "`" + `discount_value` + "`" + ` = ?,
    ` + "`" + `is_active` + "`" + ` = ?
WHERE
    ` + "`" + `id` + "`" + ` = ?
    and ` + "`" + `user_operator_id` + "`" + ` = ?
`

type UpdateVoucherParams struct {
	Code           string
	DiscountType   EcommerceGoVoucherDiscountType
	DiscountValue  string
	IsActive       uint8
	ID             string
	UserOperatorID string
}

func (q *Queries) UpdateVoucher(ctx context.Context, arg UpdateVoucherParams) error {
	_, err := q.db.ExecContext(ctx, updateVoucher,
		arg.Code,
		arg.DiscountType,
		arg.DiscountValue,
		arg.IsActive,
		arg.ID,
		arg.UserOperatorID,
	)
	return err
}

const updateVoucherStatus = `-- name: UpdateVoucherStatus :exec
UPDATE ` + "`" + `ecommerce_go_voucher` + "`" + `
SET
    ` + "`" + `is_active` + "`" + ` = 1
WHERE
    ` + "`" + `id` + "`" + ` = ?
    and ` + "`" + `user_operator_id` + "`" + ` = ?
`

type UpdateVoucherStatusParams struct {
	ID             string
	UserOperatorID string
}

func (q *Queries) UpdateVoucherStatus(ctx context.Context, arg UpdateVoucherStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateVoucherStatus, arg.ID, arg.UserOperatorID)
	return err
}
