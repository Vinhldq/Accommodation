// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: facility.sql

package database

import (
	"context"
)

const createAccommodationFacility = `-- name: CreateAccommodationFacility :exec
INSERT INTO
    ` + "`" + `ecommerce_go_accommodation_facility` + "`" + ` (` + "`" + `id` + "`" + `, ` + "`" + `image` + "`" + `, ` + "`" + `name` + "`" + `, ` + "`" + `created_at` + "`" + `, ` + "`" + `updated_at` + "`" + `)
VALUES
    (?, ?, ?, ?, ?)
`

type CreateAccommodationFacilityParams struct {
	ID        string
	Image     string
	Name      string
	CreatedAt uint64
	UpdatedAt uint64
}

func (q *Queries) CreateAccommodationFacility(ctx context.Context, arg CreateAccommodationFacilityParams) error {
	_, err := q.db.ExecContext(ctx, createAccommodationFacility,
		arg.ID,
		arg.Image,
		arg.Name,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteFacility = `-- name: DeleteFacility :exec
DELETE FROM ` + "`" + `ecommerce_go_accommodation_facility` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

func (q *Queries) DeleteFacility(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteFacility, id)
	return err
}

const getAccommodationFacilityById = `-- name: GetAccommodationFacilityById :one
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `image` + "`" + `,
    ` + "`" + `name` + "`" + `
FROM
    ` + "`" + `ecommerce_go_accommodation_facility` + "`" + `
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

type GetAccommodationFacilityByIdRow struct {
	ID    string
	Image string
	Name  string
}

func (q *Queries) GetAccommodationFacilityById(ctx context.Context, id string) (GetAccommodationFacilityByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAccommodationFacilityById, id)
	var i GetAccommodationFacilityByIdRow
	err := row.Scan(&i.ID, &i.Image, &i.Name)
	return i, err
}

const getAccommodationFacilityNames = `-- name: GetAccommodationFacilityNames :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `name` + "`" + `,
    ` + "`" + `image` + "`" + `
FROM
    ` + "`" + `ecommerce_go_accommodation_facility` + "`" + `
`

type GetAccommodationFacilityNamesRow struct {
	ID    string
	Name  string
	Image string
}

func (q *Queries) GetAccommodationFacilityNames(ctx context.Context) ([]GetAccommodationFacilityNamesRow, error) {
	rows, err := q.db.QueryContext(ctx, getAccommodationFacilityNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAccommodationFacilityNamesRow
	for rows.Next() {
		var i GetAccommodationFacilityNamesRow
		if err := rows.Scan(&i.ID, &i.Name, &i.Image); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFacility = `-- name: UpdateFacility :exec
UPDATE ` + "`" + `ecommerce_go_accommodation_facility` + "`" + `
SET
    ` + "`" + `name` + "`" + ` = ?,
    ` + "`" + `image` + "`" + ` = ?,
    ` + "`" + `updated_at` + "`" + ` = ?
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

type UpdateFacilityParams struct {
	Name      string
	Image     string
	UpdatedAt uint64
	ID        string
}

func (q *Queries) UpdateFacility(ctx context.Context, arg UpdateFacilityParams) error {
	_, err := q.db.ExecContext(ctx, updateFacility,
		arg.Name,
		arg.Image,
		arg.UpdatedAt,
		arg.ID,
	)
	return err
}

const updateNameFacility = `-- name: UpdateNameFacility :exec
UPDATE ` + "`" + `ecommerce_go_accommodation_facility` + "`" + `
SET
    ` + "`" + `name` + "`" + ` = ?,
    ` + "`" + `updated_at` + "`" + ` = ?
WHERE
    ` + "`" + `id` + "`" + ` = ?
`

type UpdateNameFacilityParams struct {
	Name      string
	UpdatedAt uint64
	ID        string
}

func (q *Queries) UpdateNameFacility(ctx context.Context, arg UpdateNameFacilityParams) error {
	_, err := q.db.ExecContext(ctx, updateNameFacility, arg.Name, arg.UpdatedAt, arg.ID)
	return err
}
