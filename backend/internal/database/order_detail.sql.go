// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: order_detail.sql

package database

import (
	"context"

	"github.com/shopspring/decimal"
)

const createOrderDetail = `-- name: CreateOrderDetail :exec
INSERT INTO
    ` + "`" + `ecommerce_go_order_detail` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `order_id` + "`" + `,
        ` + "`" + `price` + "`" + `,
        ` + "`" + `quantity` + "`" + `,
        ` + "`" + `accommodation_detail_id` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?)
`

type CreateOrderDetailParams struct {
	ID                    string
	OrderID               string
	Price                 decimal.Decimal
	Quantity              uint8
	AccommodationDetailID string
	CreatedAt             uint64
	UpdatedAt             uint64
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) error {
	_, err := q.db.ExecContext(ctx, createOrderDetail,
		arg.ID,
		arg.OrderID,
		arg.Price,
		arg.Quantity,
		arg.AccommodationDetailID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getOrderDetails = `-- name: GetOrderDetails :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `order_id` + "`" + `,
    ` + "`" + `price` + "`" + `,
    ` + "`" + `quantity` + "`" + `,
    ` + "`" + `accommodation_detail_id` + "`" + `,
    ` + "`" + `created_at` + "`" + `,
    ` + "`" + `updated_at` + "`" + `
FROM
    ` + "`" + `ecommerce_go_order_detail` + "`" + `
WHERE
    ` + "`" + `order_id` + "`" + ` = ?
`

func (q *Queries) GetOrderDetails(ctx context.Context, orderID string) ([]EcommerceGoOrderDetail, error) {
	rows, err := q.db.QueryContext(ctx, getOrderDetails, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []EcommerceGoOrderDetail
	for rows.Next() {
		var i EcommerceGoOrderDetail
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Price,
			&i.Quantity,
			&i.AccommodationDetailID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
