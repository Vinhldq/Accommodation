// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: payment.sql

package database

import (
	"context"
	"database/sql"

	"github.com/shopspring/decimal"
)

const createPayment = `-- name: CreatePayment :exec
INSERT INTO
    ` + "`" + `ecommerce_go_payment` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `order_id` + "`" + `,
        ` + "`" + `payment_status` + "`" + `,
        ` + "`" + `payment_method` + "`" + `,
        ` + "`" + `total_price` + "`" + `,
        ` + "`" + `transaction_id` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?)
`

type CreatePaymentParams struct {
	ID            string
	OrderID       string
	PaymentStatus EcommerceGoPaymentPaymentStatus
	PaymentMethod EcommerceGoPaymentPaymentMethod
	TotalPrice    decimal.Decimal
	TransactionID sql.NullString
	CreatedAt     uint64
	UpdatedAt     uint64
}

func (q *Queries) CreatePayment(ctx context.Context, arg CreatePaymentParams) error {
	_, err := q.db.ExecContext(ctx, createPayment,
		arg.ID,
		arg.OrderID,
		arg.PaymentStatus,
		arg.PaymentMethod,
		arg.TotalPrice,
		arg.TransactionID,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getPayment = `-- name: GetPayment :one
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `order_id` + "`" + `,
    ` + "`" + `payment_status` + "`" + `,
    ` + "`" + `payment_method` + "`" + `,
    ` + "`" + `total_price` + "`" + `,
    ` + "`" + `transaction_id` + "`" + `,
    ` + "`" + `created_at` + "`" + `,
    ` + "`" + `updated_at` + "`" + `
FROM
    ` + "`" + `ecommerce_go_payment` + "`" + `
WHERE
    ` + "`" + `order_id` + "`" + ` = ?
`

func (q *Queries) GetPayment(ctx context.Context, orderID string) (EcommerceGoPayment, error) {
	row := q.db.QueryRowContext(ctx, getPayment, orderID)
	var i EcommerceGoPayment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.TotalPrice,
		&i.TransactionID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getPaymentInfo = `-- name: GetPaymentInfo :one
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `order_id` + "`" + `,
    ` + "`" + `payment_status` + "`" + `,
    ` + "`" + `payment_method` + "`" + `,
    ` + "`" + `total_price` + "`" + `,
    ` + "`" + `transaction_id` + "`" + `
FROM
    ` + "`" + `ecommerce_go_payment` + "`" + `
WHERE
    ` + "`" + `order_id` + "`" + ` = ?
    and ` + "`" + `transaction_id` + "`" + ` = ?
LIMIT
    1
`

type GetPaymentInfoParams struct {
	OrderID       string
	TransactionID sql.NullString
}

type GetPaymentInfoRow struct {
	ID            string
	OrderID       string
	PaymentStatus EcommerceGoPaymentPaymentStatus
	PaymentMethod EcommerceGoPaymentPaymentMethod
	TotalPrice    decimal.Decimal
	TransactionID sql.NullString
}

func (q *Queries) GetPaymentInfo(ctx context.Context, arg GetPaymentInfoParams) (GetPaymentInfoRow, error) {
	row := q.db.QueryRowContext(ctx, getPaymentInfo, arg.OrderID, arg.TransactionID)
	var i GetPaymentInfoRow
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.PaymentStatus,
		&i.PaymentMethod,
		&i.TotalPrice,
		&i.TransactionID,
	)
	return i, err
}

const updatePaymentStatus = `-- name: UpdatePaymentStatus :exec
UPDATE ` + "`" + `ecommerce_go_payment` + "`" + `
SET
    ` + "`" + `payment_status` + "`" + ` = ?
WHERE
    ` + "`" + `id` + "`" + ` = ?
    and ` + "`" + `order_id` + "`" + ` = ?
`

type UpdatePaymentStatusParams struct {
	PaymentStatus EcommerceGoPaymentPaymentStatus
	ID            string
	OrderID       string
}

func (q *Queries) UpdatePaymentStatus(ctx context.Context, arg UpdatePaymentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updatePaymentStatus, arg.PaymentStatus, arg.ID, arg.OrderID)
	return err
}
