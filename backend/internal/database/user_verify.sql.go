// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_verify.sql

package database

import (
	"context"
)

const checkUserVerifiedOTP = `-- name: CheckUserVerifiedOTP :one
SELECT EXISTS (
    SELECT
    1
    FROM
        ` + "`" + `ecommerce_go_user_verify` + "`" + `
    WHERE
        ` + "`" + `verify_key` + "`" + ` = ? and ` + "`" + `is_verified` + "`" + ` = 1
)
`

func (q *Queries) CheckUserVerifiedOTP(ctx context.Context, verifyKey string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserVerifiedOTP, verifyKey)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createUserVerify = `-- name: CreateUserVerify :exec
INSERT INTO
    ` + "`" + `ecommerce_go_user_verify` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `otp` + "`" + `,
        ` + "`" + `verify_key` + "`" + `,
        ` + "`" + `key_hash` + "`" + `,
        ` + "`" + `type` + "`" + `,
        ` + "`" + `is_verified` + "`" + `,
        ` + "`" + `is_deleted` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateUserVerifyParams struct {
	ID         string
	Otp        string
	VerifyKey  string
	KeyHash    string
	Type       uint8
	IsVerified uint8
	IsDeleted  uint8
	CreatedAt  uint64
	UpdatedAt  uint64
}

func (q *Queries) CreateUserVerify(ctx context.Context, arg CreateUserVerifyParams) error {
	_, err := q.db.ExecContext(ctx, createUserVerify,
		arg.ID,
		arg.Otp,
		arg.VerifyKey,
		arg.KeyHash,
		arg.Type,
		arg.IsVerified,
		arg.IsDeleted,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const getIDOfUserVerify = `-- name: GetIDOfUserVerify :one
SELECT
    ` + "`" + `id` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_verify` + "`" + `
WHERE
    ` + "`" + `key_hash` + "`" + ` = ?
LIMIT 1
`

func (q *Queries) GetIDOfUserVerify(ctx context.Context, keyHash string) (string, error) {
	row := q.db.QueryRowContext(ctx, getIDOfUserVerify, keyHash)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getUserUnverify = `-- name: GetUserUnverify :one
SELECT
    ` + "`" + `otp` + "`" + `,
    ` + "`" + `key_hash` + "`" + `,
    ` + "`" + `verify_key` + "`" + `,
    ` + "`" + `is_verified` + "`" + `,
    ` + "`" + `id` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_verify` + "`" + `
WHERE
    ` + "`" + `key_hash` + "`" + ` = ?
LIMIT 1
`

type GetUserUnverifyRow struct {
	Otp        string
	KeyHash    string
	VerifyKey  string
	IsVerified uint8
	ID         string
}

func (q *Queries) GetUserUnverify(ctx context.Context, keyHash string) (GetUserUnverifyRow, error) {
	row := q.db.QueryRowContext(ctx, getUserUnverify, keyHash)
	var i GetUserUnverifyRow
	err := row.Scan(
		&i.Otp,
		&i.KeyHash,
		&i.VerifyKey,
		&i.IsVerified,
		&i.ID,
	)
	return i, err
}

const getUserVerified = `-- name: GetUserVerified :one
SELECT
    ` + "`" + `otp` + "`" + `,
    ` + "`" + `key_hash` + "`" + `,
    ` + "`" + `verify_key` + "`" + `,
    ` + "`" + `is_verified` + "`" + `,
    ` + "`" + `id` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_verify` + "`" + `
WHERE
    ` + "`" + `key_hash` + "`" + ` = ?
    AND ` + "`" + `is_verified` + "`" + ` = 1
`

type GetUserVerifiedRow struct {
	Otp        string
	KeyHash    string
	VerifyKey  string
	IsVerified uint8
	ID         string
}

func (q *Queries) GetUserVerified(ctx context.Context, keyHash string) (GetUserVerifiedRow, error) {
	row := q.db.QueryRowContext(ctx, getUserVerified, keyHash)
	var i GetUserVerifiedRow
	err := row.Scan(
		&i.Otp,
		&i.KeyHash,
		&i.VerifyKey,
		&i.IsVerified,
		&i.ID,
	)
	return i, err
}

const updateUserVerifyStatus = `-- name: UpdateUserVerifyStatus :exec
UPDATE ` + "`" + `ecommerce_go_user_verify` + "`" + `
SET
    ` + "`" + `is_verified` + "`" + ` = 1,
    ` + "`" + `is_deleted` + "`" + ` = 1,
    ` + "`" + `updated_at` + "`" + ` = ?
WHERE
    ` + "`" + `key_hash` + "`" + ` = ?
`

type UpdateUserVerifyStatusParams struct {
	UpdatedAt uint64
	KeyHash   string
}

func (q *Queries) UpdateUserVerifyStatus(ctx context.Context, arg UpdateUserVerifyStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateUserVerifyStatus, arg.UpdatedAt, arg.KeyHash)
	return err
}
