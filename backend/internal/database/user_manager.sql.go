// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user_manager.sql

package database

import (
	"context"
)

const checkUserManagerExistsByEmail = `-- name: CheckUserManagerExistsByEmail :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            ` + "`" + `ecommerce_go_user_manager` + "`" + `
        WHERE
            ` + "`" + `account` + "`" + ` = ?
            AND ` + "`" + `is_deleted` + "`" + ` = 0
    )
`

func (q *Queries) CheckUserManagerExistsByEmail(ctx context.Context, account string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserManagerExistsByEmail, account)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const checkUserManagerExistsByID = `-- name: CheckUserManagerExistsByID :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            ` + "`" + `ecommerce_go_user_manager` + "`" + `
        WHERE
            ` + "`" + `id` + "`" + ` = ?
            AND ` + "`" + `is_deleted` + "`" + ` = 0
    )
`

func (q *Queries) CheckUserManagerExistsByID(ctx context.Context, id string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserManagerExistsByID, id)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countNumberOfManagers = `-- name: CountNumberOfManagers :one
SELECT
    COUNT(egum.id)
FROM
    ` + "`" + `ecommerce_go_user_manager` + "`" + ` egum
`

func (q *Queries) CountNumberOfManagers(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countNumberOfManagers)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUserManage = `-- name: CreateUserManage :exec
INSERT INTO
    ` + "`" + `ecommerce_go_user_manager` + "`" + ` (
        ` + "`" + `id` + "`" + `,
        ` + "`" + `account` + "`" + `,
        ` + "`" + `user_name` + "`" + `,
        ` + "`" + `password` + "`" + `,
        ` + "`" + `created_at` + "`" + `,
        ` + "`" + `updated_at` + "`" + `
    )
VALUES
    (?, ?, ?, ?, ?, ?)
`

type CreateUserManageParams struct {
	ID        string
	Account   string
	UserName  string
	Password  string
	CreatedAt uint64
	UpdatedAt uint64
}

func (q *Queries) CreateUserManage(ctx context.Context, arg CreateUserManageParams) error {
	_, err := q.db.ExecContext(ctx, createUserManage,
		arg.ID,
		arg.Account,
		arg.UserName,
		arg.Password,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	return err
}

const deleteUserManager = `-- name: DeleteUserManager :exec
UPDATE ` + "`" + `ecommerce_go_user_manager` + "`" + `
SET
    ` + "`" + `is_deleted` + "`" + ` = 1
WHERE
    ` + "`" + `account` + "`" + ` = ?
`

func (q *Queries) DeleteUserManager(ctx context.Context, account string) error {
	_, err := q.db.ExecContext(ctx, deleteUserManager, account)
	return err
}

const getManagers = `-- name: GetManagers :many
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `account` + "`" + `,
    ` + "`" + `user_name` + "`" + `,
    ` + "`" + `is_deleted` + "`" + `,
    ` + "`" + `login_time` + "`" + `,
    ` + "`" + `logout_time` + "`" + `,
    ` + "`" + `created_at` + "`" + `,
    ` + "`" + `updated_at` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_manager` + "`" + `
WHERE
    ` + "`" + `is_deleted` + "`" + ` = 0
LIMIT
    ?
OFFSET
    ?
`

type GetManagersParams struct {
	Limit  int32
	Offset int32
}

type GetManagersRow struct {
	ID         string
	Account    string
	UserName   string
	IsDeleted  uint8
	LoginTime  uint64
	LogoutTime uint64
	CreatedAt  uint64
	UpdatedAt  uint64
}

func (q *Queries) GetManagers(ctx context.Context, arg GetManagersParams) ([]GetManagersRow, error) {
	rows, err := q.db.QueryContext(ctx, getManagers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetManagersRow
	for rows.Next() {
		var i GetManagersRow
		if err := rows.Scan(
			&i.ID,
			&i.Account,
			&i.UserName,
			&i.IsDeleted,
			&i.LoginTime,
			&i.LogoutTime,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserManager = `-- name: GetUserManager :one
SELECT
    ` + "`" + `id` + "`" + `,
    ` + "`" + `account` + "`" + `,
    ` + "`" + `user_name` + "`" + `,
    ` + "`" + `password` + "`" + `
FROM
    ` + "`" + `ecommerce_go_user_manager` + "`" + `
WHERE
    ` + "`" + `account` + "`" + ` = ?
    AND ` + "`" + `is_deleted` + "`" + ` = 0
`

type GetUserManagerRow struct {
	ID       string
	Account  string
	UserName string
	Password string
}

func (q *Queries) GetUserManager(ctx context.Context, account string) (GetUserManagerRow, error) {
	row := q.db.QueryRowContext(ctx, getUserManager, account)
	var i GetUserManagerRow
	err := row.Scan(
		&i.ID,
		&i.Account,
		&i.UserName,
		&i.Password,
	)
	return i, err
}

const isAccommodationDetailBelongsToManager = `-- name: IsAccommodationDetailBelongsToManager :one
SELECT
    EXISTS (
        SELECT
            1
        FROM
            ` + "`" + `ecommerce_go_user_manager` + "`" + ` m
            JOIN ` + "`" + `ecommerce_go_accommodation` + "`" + ` a ON m.id = a.manager_id
            JOIN ` + "`" + `ecommerce_go_accommodation_detail` + "`" + ` ad ON a.id = ad.accommodation_id
        WHERE
            m.id = ?
            AND ad.id = ?
    )
`

type IsAccommodationDetailBelongsToManagerParams struct {
	ID   string
	ID_2 string
}

func (q *Queries) IsAccommodationDetailBelongsToManager(ctx context.Context, arg IsAccommodationDetailBelongsToManagerParams) (bool, error) {
	row := q.db.QueryRowContext(ctx, isAccommodationDetailBelongsToManager, arg.ID, arg.ID_2)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const updateUserManagerLogin = `-- name: UpdateUserManagerLogin :exec
UPDATE ` + "`" + `ecommerce_go_user_manager` + "`" + `
SET
    ` + "`" + `login_time` + "`" + ` = ?
WHERE
    ` + "`" + `account` + "`" + ` = ?
`

type UpdateUserManagerLoginParams struct {
	LoginTime uint64
	Account   string
}

func (q *Queries) UpdateUserManagerLogin(ctx context.Context, arg UpdateUserManagerLoginParams) error {
	_, err := q.db.ExecContext(ctx, updateUserManagerLogin, arg.LoginTime, arg.Account)
	return err
}
